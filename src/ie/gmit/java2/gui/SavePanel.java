/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ie.gmit.java2.gui;

import ie.gmit.java2.parser.Parser;
import ie.gmit.java2.parser.Processor;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author user
 */
public class SavePanel extends javax.swing.JPanel implements CanReturnProcessedContent{

    

    /**
     * Creates new form ModifyPanel
     * @param lines - ie.gmit.java2.parser.LinesMap
     * @param parser - ie.gmit.java2.parser.Parser
     */

    public SavePanel(ie.gmit.java2.parser.LinesMap lines, Parser parser){
        initComponents();
        //Create a new processor
        this.processor = new Processor();
        //Add the lines to it
        this.processor.setLines(lines);
        
        //Set parser
        this.parser=parser;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        //Align the text to center
        this.jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButtonSave = new javax.swing.JButton();
        jLabelResponse = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(491, 267));
        setMinimumSize(new java.awt.Dimension(491, 267));
        setPreferredSize(new java.awt.Dimension(491, 267));

        jLabel1.setForeground(new java.awt.Color(0, 153, 0));
        jLabel1.setText(" ");
        jLabel1.setName(""); // NOI18N

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Save to file"));

        jButtonSave.setMnemonic('v');
        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        //Position the text to the center
        this.jLabelResponse.setHorizontalAlignment(SwingConstants.CENTER);

        jLayeredPane1.setLayer(jButtonSave, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabelResponse, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap(392, Short.MAX_VALUE)
                .addComponent(jButtonSave)
                .addContainerGap())
            .addComponent(jLabelResponse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabelResponse, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(jButtonSave)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLayeredPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Action listener for the save button
     * @param evt - java.awt.event.ActionEvent
     */
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        //Open the file chooser window
    	this.buildFileCHooser();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    /**
     * Build the file chooser window
     * Will give a confirmation window if the file exists
     */ 
    private void buildFileCHooser(){
    	//Get the chooser
    	JFileChooser chooser = new JFileChooser();
    	//Set home folder. I am not sure if it would work only on windows or on other platforms too, therefore I rather comment it out
        //chooser.setCurrentDirectory(new File("/home/me/Documents"));
        int retrival = chooser.showSaveDialog(null);
        //Check if a file was chosen
        if (retrival == JFileChooser.APPROVE_OPTION) {
        	//Check if the selected file exist
        	if(chooser.getSelectedFile().exists()){
        		//Show confirmation dialog
                        int close=JOptionPane.showConfirmDialog(null, "The file("+chooser.getSelectedFile().getName()+") exists. Would you like to over write the file?", "File Exists",JOptionPane.YES_NO_OPTION);
                        //If yes was chosen
                        if(close==JOptionPane.YES_OPTION){
                                //Try to write to the file
                            this.writeContents(chooser.getSelectedFile());
                            //Disable the button while saving
                            this.jButtonSave.setEnabled(false);
                        }else{
                                //Call the method itself again to choose another file
                                this.buildFileCHooser();
                                return;
                        }
        	}else{
            	//Try to write to the file
                this.writeContents(chooser.getSelectedFile());
                //Disable the button while saving
                this.jButtonSave.setEnabled(false);
                //Show a please wait message to the user
                this.setMessage("Please wait. Saving...");
        	}
        }
    }
   
    /**
     * Writes the content of the processor into the given file
     * @param file - File 
     */
    private void writeContents(File file){
        
    	//Try to rename the file into a new file
        File newFile=this.renameFile(file);
    	
        //Place the saving in a thread
        ie.gmit.java2.TextAnalyser.runThread(()->{
                //Create a file channel for writing into the file
	    	try(FileChannel ch=new FileOutputStream(newFile.getAbsoluteFile()).getChannel();){            
	            //Create a new character set. it is needed for the write out as we write out a byte buffer rather than a string
	            Charset charset = Charset.forName("UTF-8");
	                //Get the lines of the parser
	                this.processor.getLines().forEach((k,line)->{
	                    //Implode the content of the line by a white space character
	                    String result = String.join(" ", line);
	                    try{
	                        //Convert the line into a byte buffer then write into the file
	                        ch.write(charset.newEncoder().encode(CharBuffer.wrap(result+"\n")));
	                    }catch(IOException ex){
                                //Throw the exception out of the lambda
                                throwActualException(ex);
	                    }
	                });
	            ch.close(); 
                    this.setMessage("The file was successfuly saved.");
                    
	        }catch (IOException ex) {
	        	ie.gmit.java2.TextAnalyser.LOG.debug(ex.getMessage(), ex);
                        this.setErrorMessage("Could not write to the file.");
                }catch(Exception ex){
                        ie.gmit.java2.TextAnalyser.LOG.debug(ex.getMessage(), ex);
                        //Set the message color to red
                        this.setErrorMessage("Could not write to the file.");
                }finally{
	        	//Enable back the button regardless the outcome of the writing
	            this.jButtonSave.setEnabled(true);
	        }
        });
    }
    
    /**
     * Checks if the chosen file has an extension. If not then it will add the original extension
     * @param file - File 
     */
    private File renameFile(File File){
        //Try to rename the file
    	//get the file extension
        String ext = FilenameUtils.getExtension(File.getName());
        //If the file doesn't have an extension
        if(ext.equals("")){
            //Then get the original one
            ext=FilenameUtils.getExtension(this.parser.getSourceName());
            //if the original has an extension then rename the new file with the extension
            if(!ext.equals("")){
                //Replace the file with the new one e.g. rename it
            	File = new File(File.getPath()+"."+ext);
            }
        }
    	
        //Return the renamed file
        return File;
    }
    
    /**
     * Create a new function what can throw an exception out of the lambda expression
     * @param <T>
     * @param <E>
     * @param exception
     * @throws E 
     */
    private static <T, E extends Exception> T throwActualException(Exception exception) throws E {
        //Throw Exception
        throw (E) exception;
    }
    
    /**
     * Set the error message in the label and colors it red
     * @param message - String
     */
    private void setErrorMessage(String message){
        //Set message
        this.jLabelResponse.setText(message);
        //Set the message color to red
        this.jLabelResponse.setForeground(new java.awt.Color(255, 0, 0));
    }
    
    /**
     * Set a message in the label and colors it green
     * @param message - String
     */
    private void setMessage(String message){
        //Set message
        this.jLabelResponse.setText(message);
        //Set the message color to red
        this.jLabelResponse.setForeground(new java.awt.Color(0, 255, 0));
    }
    
    @Override
    public void setProcessorContent(ie.gmit.java2.parser.LinesMap lines) {
        //Set the lines in the processor object
        this.processor.setLines(lines);
    }

    @Override
    public ie.gmit.java2.parser.LinesMap getProcessorContent() {
        //Return a copy of the lines from theprocessor
        return this.processor.getLines();
    }

    @Override
    public long getLastModifiedTime() {
        //Return the last modified time form the timestamp.
        return this.processor.getLastModifiedTime();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelResponse;
    private javax.swing.JLayeredPane jLayeredPane1;
    // End of variables declaration//GEN-END:variables
    //The processor object
    private final Processor processor;
    //The parser object
    private final Parser parser;
}
