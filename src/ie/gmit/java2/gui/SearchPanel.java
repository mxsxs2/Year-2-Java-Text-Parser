/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ie.gmit.java2.gui;

import ie.gmit.java2.parser.Processor;
import ie.gmit.java2.thirdparty.TextPrompt;
import java.awt.Component;
import java.lang.reflect.InvocationTargetException;
import javax.swing.JCheckBox;

/**
 *
 * @author user
 */
public class SearchPanel extends javax.swing.JPanel implements CanReturnProcessedContent{

    /**
     * Creates new form SearchPanel
     * @param lines - ie.gmit.java2.parser.LinesMap
     */
    public SearchPanel(ie.gmit.java2.parser.LinesMap lines) {
        //initialize components
        initComponents();
        //Create a new processor
        this.processor = new Processor();
        //Add the lines to the processor
        this.processor.setLines(lines);
        
        //Bind the event listeners to the check boxes(Too lazy to add one by one. Plus i can change it here rather then many different places)
        for(Component component:this.jLayeredPaneResultsChooser.getComponents()){
            //Check if it is a check box
            if(component instanceof javax.swing.JCheckBox){
                //If it is a check box then bind the event listener
                ((javax.swing.JCheckBox)component).addActionListener((java.awt.event.ActionEvent evt) -> {
                    //Check if the button can be enabled or not
                    searchButtonEnabler();
                });
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldSearchWord = new javax.swing.JTextField();
        TextPrompt tsearch7 = new TextPrompt("Word tor search for", this.jTextFieldSearchWord);
        jButtonSearch = new javax.swing.JButton();
        jLayeredPaneResultsChooser = new javax.swing.JLayeredPane();
        jCheckBoxLastIndex = new javax.swing.JCheckBox();
        jCheckBoxContains = new javax.swing.JCheckBox();
        jCheckBoxAllIndeces = new javax.swing.JCheckBox();
        jCheckBoxFirstIndex = new javax.swing.JCheckBox();
        jCheckBoxOccurrences = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaResult = new javax.swing.JTextArea();

        setMaximumSize(new java.awt.Dimension(491, 267));
        setMinimumSize(new java.awt.Dimension(491, 267));
        setPreferredSize(new java.awt.Dimension(491, 267));

        jTextFieldSearchWord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextFieldSearchWordMouseReleased(evt);
            }
        });
        jTextFieldSearchWord.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchWordKeyReleased(evt);
            }
        });

        jButtonSearch.setMnemonic('r');
        jButtonSearch.setText("Search");
        jButtonSearch.setToolTipText("");
        jButtonSearch.setEnabled(false);
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jLayeredPaneResultsChooser.setBorder(javax.swing.BorderFactory.createTitledBorder("Results to show"));

        jCheckBoxLastIndex.setMnemonic('L');
        jCheckBoxLastIndex.setText("Last Index");
        jCheckBoxLastIndex.setName("getLastIndex"); // NOI18N

        jCheckBoxContains.setMnemonic('C');
        jCheckBoxContains.setSelected(true);
        jCheckBoxContains.setText("Contains");
        jCheckBoxContains.setName("contains"); // NOI18N

        jCheckBoxAllIndeces.setMnemonic('A');
        jCheckBoxAllIndeces.setText("All Indeces");
        jCheckBoxAllIndeces.setName("getAllIndices"); // NOI18N

        jCheckBoxFirstIndex.setMnemonic('F');
        jCheckBoxFirstIndex.setText("First Index");
        jCheckBoxFirstIndex.setName("getFirstIndex"); // NOI18N

        jCheckBoxOccurrences.setMnemonic('O');
        jCheckBoxOccurrences.setText("Occurrences");
        jCheckBoxOccurrences.setName("countOccurrences"); // NOI18N

        jLayeredPaneResultsChooser.setLayer(jCheckBoxLastIndex, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneResultsChooser.setLayer(jCheckBoxContains, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneResultsChooser.setLayer(jCheckBoxAllIndeces, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneResultsChooser.setLayer(jCheckBoxFirstIndex, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneResultsChooser.setLayer(jCheckBoxOccurrences, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPaneResultsChooserLayout = new javax.swing.GroupLayout(jLayeredPaneResultsChooser);
        jLayeredPaneResultsChooser.setLayout(jLayeredPaneResultsChooserLayout);
        jLayeredPaneResultsChooserLayout.setHorizontalGroup(
            jLayeredPaneResultsChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneResultsChooserLayout.createSequentialGroup()
                .addComponent(jCheckBoxContains)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOccurrences)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxFirstIndex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxLastIndex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxAllIndeces)
                .addContainerGap(72, Short.MAX_VALUE))
        );
        jLayeredPaneResultsChooserLayout.setVerticalGroup(
            jLayeredPaneResultsChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneResultsChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBoxOccurrences)
                .addComponent(jCheckBoxFirstIndex)
                .addComponent(jCheckBoxContains))
            .addGroup(jLayeredPaneResultsChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBoxLastIndex)
                .addComponent(jCheckBoxAllIndeces))
        );

        jTextAreaResult.setColumns(20);
        jTextAreaResult.setRows(5);
        jTextAreaResult.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextAreaResult.setEnabled(false);
        jScrollPane1.setViewportView(jTextAreaResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPaneResultsChooser)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldSearchWord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSearch))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSearch, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextFieldSearchWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPaneResultsChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Mouse release listener for the search field
     * @param evt - java.awt.event.MouseEvent
     */
    private void jTextFieldSearchWordMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldSearchWordMouseReleased
        //Enable/disable the search button
        this.searchButtonEnabler();
    }//GEN-LAST:event_jTextFieldSearchWordMouseReleased

    /**
     * Key release listener for the search field
     * @param evt - java.awt.event.KeyEvent
     */
    private void jTextFieldSearchWordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchWordKeyReleased
        //Enable/disable the search button
        this.searchButtonEnabler();
        //Check if enter was pressed
        this.enterPressed(evt);
    }//GEN-LAST:event_jTextFieldSearchWordKeyReleased
    
    /**
     * Action performed listener for the search button
     * Check which check boxes were thicked then it instantiates them one by one, carries on the feature then writes the result into the response text area
     * @param evt - java.awt.event.ActionEvent
     */
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        //Get the content of text field
        String searchText=this.jTextFieldSearchWord.getText().trim();
        //Clear result container:
        this.jTextAreaResult.setText("");

        try {
            //Get the class of parser
            Class<?> parserClass = Class.forName("ie.gmit.java2.parser.Searchable");

            //Place the search in a thread
            ie.gmit.java2.TextAnalyser.runThread(()->{
                //"Start the timer" for parsing time
                final long start = System.nanoTime();
                //Get all the components from the check box container
                for(Component component:this.jLayeredPaneResultsChooser.getComponents()){
                    //Check if it is a check box
                    if(component instanceof JCheckBox){
                        //If it is a check box then check if it is selected
                        if(((JCheckBox)component).isSelected()){
                            //If it is selected then get the belonging method
                            try{
                                //String result=((ie.gmit.java2.parser.Parser)this.parserObject).contains(searchText)+"";
                                //Get the belonging method of check box then invoke it on our parser object with the content of the search field as aparameter
                                Object result=parserClass.getDeclaredMethod(component.getName(),String.class).invoke(this.processor, searchText);
                                //If it is a int array the size is exactly two then it is line+word index
                                if(result instanceof int[] && ((int[])result).length==2){
                                    result="Line "+(++((int[])result)[0])+" Word "+(++((int[])result)[1]);
                                }
                                //If it is a two dimensional int array then is is the all indices method
                                if(result instanceof int[][]){
                                    //Create result holder
                                    String resultString="\n";
                                    //Loop each line
                                    for(int[] l:(int[][])result){
                                        resultString+="     Line "+(++l[0])+" Word "+(++l[1])+"\n";
                                    }
                                    result=resultString;
                                }

                                //Add the result to the end of the results text area;
                                this.jTextAreaResult.append(((JCheckBox) component).getText()+": "+result.toString()+"\n\n");
                            }catch(IllegalArgumentException | SecurityException | NoSuchMethodException | IllegalAccessException | InvocationTargetException ex){
                                //Do nothing there should not be any of these errors.
                                ie.gmit.java2.TextAnalyser.LOG.debug(ex.getMessage(), ex);
                            }

                        }
                    }
                }
                //Set time in millisecs
                this.jTextAreaResult.append("Finished in: "+((float)((System.nanoTime() - start) / 1000000)/(float)1000)+"s");
            });
        } catch (ClassNotFoundException ex) {
            //The class is there anyways...
            ie.gmit.java2.TextAnalyser.LOG.debug(ex.getMessage(), ex);
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed
    
    /**
     * Search button enabler
     * Checks if anything is written to the search field and if at least one check box is checked
     */ 
    private boolean searchButtonEnabler(){
        //Check if there is any search text
        if(this.jTextFieldSearchWord.getText().trim().length()>0){
            //Get all the components from the check box container
            for(Component component:this.jLayeredPaneResultsChooser.getComponents()){
                //Check if it is a check box
                if(component instanceof javax.swing.JCheckBox){
                    //If it is a check box then check if it is selected
                    if(((javax.swing.JCheckBox)component).isSelected()){
                        //If it is selected the set the button enabled
                        this.jButtonSearch.setEnabled(true);
                        //Exit the method as we need only one check box to be selected
                        return true;
                    }
                }
            }
        }
        //Nothing was selected so set button to disabled
        this.jButtonSearch.setEnabled(false);
        return false;
    }
    
    /**
     * Detect enter press in the search field
     * @param evt - java.awt.event.KeyEvent
     */ 
    private void enterPressed(java.awt.event.KeyEvent evt){
        //Check if enter was pressed
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER){
            //If the button is enabled
            if(this.jButtonSearch.isEnabled()){
                //Simulate a click on the button
                this.jButtonSearchActionPerformed(new java.awt.event.ActionEvent(new Object(),0,""));
            }
        }
    }
    
    @Override
    public void setProcessorContent(ie.gmit.java2.parser.LinesMap lines) {
        //Set the lines in the processor object
        this.processor.setLines(lines);
    }

    @Override
    public ie.gmit.java2.parser.LinesMap getProcessorContent() {
        //Return a copy of the lines from theprocessor
        return this.processor.getLines();
    }

    @Override
    public long getLastModifiedTime() {
        //Return the last modified time form the timestamp.
        return this.processor.getLastModifiedTime();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxAllIndeces;
    private javax.swing.JCheckBox jCheckBoxContains;
    private javax.swing.JCheckBox jCheckBoxFirstIndex;
    private javax.swing.JCheckBox jCheckBoxLastIndex;
    private javax.swing.JCheckBox jCheckBoxOccurrences;
    private javax.swing.JLayeredPane jLayeredPaneResultsChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaResult;
    private javax.swing.JTextField jTextFieldSearchWord;
    // End of variables declaration//GEN-END:variables
    //The processor object
    private final Processor processor;
}
